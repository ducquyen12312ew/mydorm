<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>B·∫£n ƒë·ªì K√Ω t√∫c x√° ƒê·∫°i h·ªçc B√°ch Khoa H√† N·ªôi - Leaflet</title>
    
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.css" />
    
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
        }
        #map {
            height: 100vh;
            width: 100%;
        }
        .header-bar {
            position: absolute;
            top: 20px;
            left: 20px;
            z-index: 1000;
            width: 350px;
            border-radius: 15px;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.2);
            overflow: hidden;
        }
        .search-container {
            background-color: white;
            display: flex;
            align-items: center;
            padding: 15px 20px;
            border-radius: 15px;
        }
        .search-icon {
            margin-right: 15px;
            color: #e91e63;
        }
        #search-input {
            flex-grow: 1;
            border: none;
            outline: none;
            font-size: 18px;
            color: #333;
        }
        .dropdown-icon {
            margin-left: 15px;
            cursor: pointer;
        }
        .filter-container {
            display: flex;
            background-color: #f8f8f8;
            border-top: 1px solid #eee;
            overflow-x: auto;
            padding: 8px 10px;
        }
        .filter-btn {
            background: white;
            border: 1px solid #ddd;
            border-radius: 20px;
            padding: 5px 15px;
            margin-right: 10px;
            font-size: 14px;
            white-space: nowrap;
            cursor: pointer;
        }
        .filter-btn.active {
            background: #e91e63;
            color: white;
            border-color: #e91e63;
        }
        .custom-popup {
            max-width: 300px;
        }
        .custom-popup h3 {
            color: #e91e63;
            margin-top: 0;
            margin-bottom: 10px;
        }
        .custom-popup .image {
            width: 100%;
            height: 150px;
            background-color: #f0f0f0;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-style: italic;
            color: #666;
            background-size: cover;
            background-position: center;
        }
        .custom-popup p {
            margin: 5px 0;
        }
        .custom-popup .action-btns {
            display: flex;
            margin-top: 15px;
        }
        .custom-popup button {
            flex: 1;
            background: #e91e63;
            color: white;
            border: none;
            padding: 8px 10px;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 8px;
        }
        .custom-popup button:last-child {
            margin-right: 0;
            background: #2196F3;
        }
        .control-panel {
            position: absolute;
            top: 20px;
            right: 20px;
            z-index: 999;
            background: white;
            border-radius: 5px;
            box-shadow: 0 1px 5px rgba(0,0,0,0.2);
            overflow: hidden;
        }
        .control-btn {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            border-bottom: 1px solid #eee;
        }
        .control-btn:last-child {
            border-bottom: none;
        }
        .control-btn:hover {
            background: #f5f5f5;
        }
        .dropdown-menu {
            position: absolute;
            top: 100%;
            left: 0;
            width: 100%;
            background-color: white;
            border-radius: 0 0 10px 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease;
            z-index: 1001;
        }
    
        .dropdown-menu.active {
            max-height: 400px;
        }
    
        .dropdown-section {
            padding: 15px;
            border-bottom: 1px solid #f0f0f0;
        }
    
        .dropdown-section h4 {
            margin-bottom: 10px;
            color: #e91e63;
        }
    
        .dropdown-options {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }
        .dropdown-option {
            background-color: #f4f4f4;
            padding: 8px 15px;
            border-radius: 20px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
    
        .dropdown-option:hover {
            background-color: #e91e63;
            color: white;
        }
    
        .dropdown-option.selected {
            background-color: #e91e63;
            color: white;
        }
        
        /* ·∫®n n√∫t zoom m·∫∑c ƒë·ªãnh c·ªßa Leaflet */
        .leaflet-control-zoom {
            display: none !important;
        }
    </style>
</head>
<body>
    <div class="header-bar">
        <div class="search-container">
            <svg width="30" height="30" class="search-icon" viewBox="0 0 24 24" fill="none" stroke="#e91e63" stroke-width="2">
                <circle cx="11" cy="11" r="8"></circle>
                <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
            </svg>
            
            <input id="search-input" type="text" placeholder="T√¨m k√Ω t√∫c x√°...">
            
            <svg width="20" height="20" class="dropdown-icon" id="dropdown-toggle" viewBox="0 0 24 24" fill="none" stroke="#666" stroke-width="2">
                <path d="M6 9l6 6 6-6"></path>
            </svg>
        </div>
        
        <div class="dropdown-menu" id="dropdown-menu">
            <div class="dropdown-section">
                <h4>Ph√¢n lo·∫°i khu</h4>
                <div class="dropdown-options">
                    <div class="dropdown-option" data-category="basic">Khu c∆° b·∫£n</div>
                    <div class="dropdown-option" data-category="premium">Khu cao c·∫•p</div>
                    <div class="dropdown-option" data-category="international">Khu du h·ªçc sinh</div>
                </div>
            </div>
            <div class="dropdown-section">
                <h4>Lo·∫°i ph√≤ng</h4>
                <div class="dropdown-options">
                    <div class="dropdown-option" data-room="8-person">Ph√≤ng 8 sinh vi√™n</div>
                    <div class="dropdown-option" data-room="4-person-service">Ph√≤ng d·ªãch v·ª• 4 sinh vi√™n</div>
                    <div class="dropdown-option" data-room="5-person">Ph√≤ng 5 sinh vi√™n</div>
                    <div class="dropdown-option" data-room="10-person">Ph√≤ng 10 sinh vi√™n</div>
                </div>
            </div>
        </div>
    </div>

    <div id="map"></div>

    

    <div class="control-panel">
        <div class="control-btn" id="locate-me" title="V·ªã tr√≠ c·ªßa t√¥i">üìç</div>
        <div class="control-btn" id="zoom-in" title="Ph√≥ng to">‚ûï</div>
        <div class="control-btn" id="zoom-out" title="Thu nh·ªè">‚ûñ</div>
        <div class="control-btn" id="reset-view" title="Kh√¥i ph·ª•c view">üè†</div>
    </div>

    <!-- Leaflet JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.js"></script>
    
    <script>
        // Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ tham chi·∫øu ƒë·∫øn map v√† markers
// Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ tham chi·∫øu ƒë·∫øn map v√† markers
let map;
let dormMarkers = [];

// ƒê·∫£m b·∫£o DOM ƒë√£ ƒë∆∞·ª£c t·∫£i ho√†n to√†n tr∆∞·ªõc khi th·ª±c thi
document.addEventListener('DOMContentLoaded', function() {
    // X·ª≠ l√Ω dropdown menu tr∆∞·ªõc khi kh·ªüi t·∫°o b·∫£n ƒë·ªì
    const dropdownIcon = document.getElementById('dropdown-toggle');
    const dropdownMenu = document.getElementById('dropdown-menu');
    
    if (dropdownIcon && dropdownMenu) {
        console.log("Dropdown elements found");
        dropdownIcon.addEventListener('click', function(e) {
            e.stopPropagation();
            dropdownMenu.classList.toggle('active');
            console.log("Dropdown clicked, active:", dropdownMenu.classList.contains('active'));
        });
    }
    
    // ƒê√≥ng dropdown khi click b√™n ngo√†i
    document.addEventListener('click', function(event) {
        if (!event.target.closest('.header-bar') && dropdownMenu.classList.contains('active')) {
            dropdownMenu.classList.remove('active');
        }
    });
    
    // T·∫°o b·∫£n ƒë·ªì
    map = L.map('map', {
        zoomControl: false  // T·∫Øt n√∫t zoom m·∫∑c ƒë·ªãnh
    }).setView([21.007119, 105.843220], 15);

    // Th√™m OpenStreetMap layer
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    // T·∫°o c√°c icon t·ª´ h√¨nh ·∫£nh
    const universityIcon = L.icon({
        iconUrl: '/image/university.png', // ƒê∆∞·ªùng d·∫´n ƒë·∫øn h√¨nh ·∫£nh ƒë·∫°i h·ªçc
        iconSize: [60, 60],      // K√≠ch th∆∞·ªõc icon
        iconAnchor: [16, 32],    // ƒêi·ªÉm neo c·ªßa icon
        popupAnchor: [0, -32]    // ƒêi·ªÉm neo c·ªßa popup
    });

    const dormSchoolIcon = L.icon({
        iconUrl: '/image/location.png',  // H√¨nh ·∫£nh k√Ω t√∫c x√° tr∆∞·ªùng
        iconSize: [60, 60],
        iconAnchor: [16, 32],
        popupAnchor: [0, -32]
    });

    const dormPrivateIcon = L.icon({
        iconUrl: '/image/location.png',  // H√¨nh ·∫£nh k√Ω t√∫c x√° t∆∞ nh√¢n
        iconSize: [60, 60],
        iconAnchor: [16, 32],
        popupAnchor: [0, -32]
    });

    // Th√™m marker cho tr∆∞·ªùng ƒê·∫°i h·ªçc B√°ch Khoa
    const university = L.marker([21.007119, 105.843220], {
        icon: universityIcon
    }).addTo(map);

    university.bindPopup(`
        <div class="custom-popup">
            <h3>ƒê·∫°i h·ªçc B√°ch Khoa H√† N·ªôi</h3>
            <div class="image">H√¨nh ·∫£nh tr∆∞·ªùng</div>
            <p><strong>ƒê·ªãa ch·ªâ:</strong> S·ªë 1 ƒê·∫°i C·ªì Vi·ªát, Hai B√† Tr∆∞ng, H√† N·ªôi</p>
            <p><strong>Website:</strong> <a href="https://hust.edu.vn" target="_blank">hust.edu.vn</a></p>
            <div class="action-btns">
                <button onclick="window.open('https://hust.edu.vn/thong-tin')">Th√¥ng tin</button>
                <button onclick="showDirections(21.007119, 105.843220)">Ch·ªâ ƒë∆∞·ªùng</button>
            </div>
        </div>
    `);

    // L·∫•y d·ªØ li·ªáu k√Ω t√∫c x√° t·ª´ API
    fetchDormitories();
    
    // X·ª≠ l√Ω ch·ªçn option trong dropdown
    const categoryOptions = document.querySelectorAll('[data-category]');
    const roomOptions = document.querySelectorAll('[data-room]');
    
    function handleOptionSelect(options) {
        options.forEach(option => {
            option.addEventListener('click', function(e) {
                e.stopPropagation(); // NgƒÉn vi·ªác click lan t·ªèa
                
                // B·ªè selected cho c√°c option kh√°c trong c√πng nh√≥m
                options.forEach(opt => opt.classList.remove('selected'));
                this.classList.add('selected');
                
                // Th·ª±c hi·ªán t√¨m ki·∫øm v·ªõi category ho·∫∑c room ƒë∆∞·ª£c ch·ªçn
                const selectedValue = this.getAttribute('data-category') || this.getAttribute('data-room');
                console.log("Selected option:", selectedValue);
                
                // L·∫•y d·ªØ li·ªáu l·ªçc t·ª´ API thay v√¨ l·ªçc ·ªü client
                if (this.hasAttribute('data-category')) {
                    fetchFilteredDormitories('category', selectedValue);
                } else if (this.hasAttribute('data-room')) {
                    fetchFilteredDormitories('roomType', selectedValue);
                }
            });
        });
    }
    
    // G·∫Øn s·ª± ki·ªán cho c√°c option
    handleOptionSelect(categoryOptions);
    handleOptionSelect(roomOptions);

    // X·ª≠ l√Ω t√¨m ki·∫øm b·∫±ng thanh search
    const searchInput = document.getElementById('search-input');
    let searchTimeout;
    
    searchInput.addEventListener('input', function() {
        const searchText = this.value.toLowerCase();
        clearTimeout(searchTimeout);
        
        if (searchText.length < 2) {
            return;
        }
        
        // Th√™m debounce ƒë·ªÉ tr√°nh g·ªçi API qu√° nhi·ªÅu
        searchTimeout = setTimeout(() => {
            fetchSearchResults(searchText);
        }, 300);
    });

    // C√°c ph·∫ßn x·ª≠ l√Ω n√∫t ƒëi·ªÅu khi·ªÉn
    document.getElementById('locate-me').addEventListener('click', function() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                position => {
                    const userLocation = [position.coords.latitude, position.coords.longitude];
                    map.setView(userLocation, 15);
                    
                    // T·∫°o marker cho v·ªã tr√≠ c·ªßa ng∆∞·ªùi d√πng
                    L.marker(userLocation, {
                        icon: L.icon({
                            iconUrl: '/image/user-location.png',  // Icon v·ªã tr√≠ ng∆∞·ªùi d√πng
                            iconSize: [32, 32],
                            iconAnchor: [16, 32],
                            popupAnchor: [0, -32]
                        })
                    }).addTo(map)
                      .bindPopup("B·∫°n ƒëang ·ªü ƒë√¢y!")
                      .openPopup();
                },
                error => {
                    alert("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠ c·ªßa b·∫°n: " + error.message);
                }
            );
        } else {
            alert("Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ƒë·ªãnh v·ªã");
        }
    });

    document.getElementById('zoom-in').addEventListener('click', function() {
        map.zoomIn();
    });

    document.getElementById('zoom-out').addEventListener('click', function() {
        map.zoomOut();
    });

    document.getElementById('reset-view').addEventListener('click', function() {
        map.setView([21.007119, 105.843220], 15);
    });
});

// H√†m l·∫•y t·∫•t c·∫£ k√Ω t√∫c x√°
function fetchDormitories() {
    fetch('/api/map-data')
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(dormitories => {
            console.log("Fetched dormitories:", dormitories);
            if (dormitories && dormitories.length > 0) {
                addDormsToMap(dormitories);
            }
        })
        .catch(error => {
            console.error('Error fetching dormitories:', error);
        });
}

// H√†m l·∫•y k√Ω t√∫c x√° theo b·ªô l·ªçc
function fetchFilteredDormitories(filterType, value) {
    fetch(`/api/dormitories/filter?${filterType}=${value}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success && data.data.length > 0) {
                // X√≥a markers c≈©
                clearMarkers();
                
                // Th√™m markers m·ªõi
                addDormsToMap(data.data, true);
                
                // Zoom v√†o k·∫øt qu·∫£ ƒë·∫ßu ti√™n
                if (data.data[0].location && data.data[0].location.coordinates) {
                    const coordinates = [data.data[0].location.coordinates[1], data.data[0].location.coordinates[0]];
                    map.setView(coordinates, 17);
                }
            } else {
                console.log("No dormitories found with filter:", filterType, value);
            }
            
            // ƒê√≥ng dropdown
            document.getElementById('dropdown-menu').classList.remove('active');
        })
        .catch(error => {
            console.error('Error fetching filtered dormitories:', error);
        });
}

// H√†m t√¨m ki·∫øm k√Ω t√∫c x√° theo text
function fetchSearchResults(searchText) {
    fetch(`/api/dormitories/search?query=${encodeURIComponent(searchText)}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success && data.data.length > 0) {
                // X√≥a markers c≈©
                clearMarkers();
                
                // Th√™m markers m·ªõi
                addDormsToMap(data.data, true);
                
                // Zoom v√†o k·∫øt qu·∫£ ƒë·∫ßu ti√™n
                if (data.data[0].location && data.data[0].location.coordinates) {
                    const coordinates = [data.data[0].location.coordinates[1], data.data[0].location.coordinates[0]];
                    map.setView(coordinates, 17);
                }
            } else {
                console.log("No dormitories found with search:", searchText);
            }
        })
        .catch(error => {
            console.error('Error searching dormitories:', error);
        });
}

// H√†m ƒë·ªÉ th√™m c√°c k√Ω t√∫c x√° v√†o b·∫£n ƒë·ªì
function addDormsToMap(dorms, openPopup = false) {
    dorms.forEach(dorm => {
        if (dorm.location && dorm.location.coordinates && dorm.location.coordinates.length === 2) {
            // Leaflet s·ª≠ d·ª•ng [latitude, longitude] nh∆∞ng MongoDB l∆∞u [longitude, latitude]
            const coordinates = [dorm.location.coordinates[1], dorm.location.coordinates[0]];
            
            // X√°c ƒë·ªãnh icon d·ª±a tr√™n lo·∫°i k√Ω t√∫c x√°
            const markerIcon = dorm.details && dorm.details.type === 'school' ? 
                L.icon({
                    iconUrl: '/image/location.png',  // H√¨nh ·∫£nh k√Ω t√∫c x√° tr∆∞·ªùng
                    iconSize: [60, 60],
                    iconAnchor: [16, 32],
                    popupAnchor: [0, -32]
                }) : 
                L.icon({
                    iconUrl: '/image/location.png',  // H√¨nh ·∫£nh k√Ω t√∫c x√° t∆∞ nh√¢n
                    iconSize: [60, 60],
                    iconAnchor: [16, 32],
                    popupAnchor: [0, -32]
                });
            
            const marker = L.marker(coordinates, {
                icon: markerIcon
            }).addTo(map);
            
            // T·∫°o danh s√°ch ti·ªán √≠ch n·∫øu c√≥
            let amenitiesList = 'Kh√¥ng c√≥ th√¥ng tin';
            if (dorm.details && dorm.details.amenities && dorm.details.amenities.length > 0) {
                amenitiesList = dorm.details.amenities.join(", ");
            }
            
            // T·∫°o popup v·ªõi th√¥ng tin chi ti·∫øt
            const popupContent = `
                <div class="custom-popup">
                    <h3>${dorm.name}</h3>
                    <div class="image" ${dorm.imageUrl ? `style="background-image: url('${dorm.imageUrl}')"` : ''}>
                        ${!dorm.imageUrl ? 'Ch∆∞a c√≥ h√¨nh ·∫£nh' : ''}
                    </div>
                    ${dorm.details ? `
                        <p><strong>Tr·∫°ng th√°i:</strong> ${dorm.details.available ? '<span style="color: green">C√≤n ch·ªó</span>' : '<span style="color: red">H·∫øt ch·ªó</span>'}</p>
                    ` : ''}
                    <div class="action-btns">
                        <button onclick="registerDorm('${dorm._id}')">ƒêƒÉng k√Ω</button>
                        <button onclick="showDirections(${coordinates[0]}, ${coordinates[1]})">Ch·ªâ ƒë∆∞·ªùng</button>
                    </div>
                </div>
            `;
            
            marker.bindPopup(popupContent);
            
            if (openPopup) {
                marker.openPopup();
            }
            
            // L∆∞u marker ƒë·ªÉ c√≥ th·ªÉ x√≥a sau n√†y
            dormMarkers.push({
                marker: marker,
                data: dorm
            });
        }
    });
}

// H√†m x√≥a t·∫•t c·∫£ marker hi·ªán t·∫°i
function clearMarkers() {
    for (let i = 0; i < dormMarkers.length; i++) {
        map.removeLayer(dormMarkers[i].marker);
    }
    dormMarkers = [];
}

// H√†m m·ªü form ƒëƒÉng k√Ω
function registerDorm(dormId) {
    // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng k√Ω v·ªõi ID k√Ω t√∫c x√°
    alert(`Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng k√Ω cho k√Ω t√∫c x√° ID: ${dormId}`);
    // window.location.href = `/register-dorm/${dormId}`;
}

// H√†m hi·ªÉn th·ªã ch·ªâ ƒë∆∞·ªùng (c√≥ th·ªÉ s·ª≠ d·ª•ng Google Maps ho·∫∑c d·ªãch v·ª• kh√°c)
function showDirections(lat, lng) {
    const url = `https://www.google.com/maps/dir/?api=1&destination=${lat},${lng}`;
    window.open(url, '_blank');
}
    </script>
</body>
</html>